require 'spec_helper'

describe '<%= metadata.name %>' do
  on_supported_os.each do |os, facts|
    describe "on #{os}" do
      let(:facts) do
        facts
      end

      context 'with default parameters' do
        it { is_expected.to compile.with_all_deps }

        it { is_expected.to contain_class('<%= metadata.name %>') }
        it { is_expected.to contain_class('<%= metadata.name %>::params') }
        it { is_expected.to contain_class('<%= metadata.name %>::install')
             .that_comes_before('<%= metadata.name %>::config') }
        it { is_expected.to contain_class('<%= metadata.name %>::config')
             .that_notifies('<%= metadata.name %>::service') }
        it { is_expected.to contain_class('<%= metadata.name %>::service') }
      end

      describe '<%= metadata.name %>::install' do
        context 'with default parameters' do
          it { is_expected.to contain_package('<%= metadata.name %>')
               .with_ensure('present') }
        end
      end

      describe '<%= metadata.name %>::service' do
        context 'with default parameters' do
          it { is_expected.to contain_service('<%= metadata.name %>')
               .with_ensure('running')
               .with_enable('true') }
        end
      end
    end
  end

  describe 'on unsupported operating system' do
    let(:facts) {{
      :osfamily        => 'Solaris',
      :operatingsystem => 'Nexenta',
    }}

    context 'with default parameters' do
      it { expect { is_expected.to contain_class('<%= metadata.name %>') }
           .to raise_error(Puppet::Error, /Nexenta not supported/) }
    end
  end
end
